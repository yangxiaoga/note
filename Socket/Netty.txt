
		Netty

1、谁在用
	
	Hadoop的RPC框架Avro,JMS,RocketMQ,主流的分布式通信框架Dubbox

	选择原因
		流行的NIO client-server 异步框架
		简单易用的API从网路处理代码中解耦业务逻辑
		健壮性，功能，性能，可定制性，可扩展性


	
2、架构组成

	Transport Services  | 	Protocol Support
	-------------------- --------------------------------------------------------------
	Socket Datagram     |	Http WebSocket          SSL StartTLS          Google Protobuf
	Http Tunnel		zlib/gzip Compression   Large File Transfer   Rtsp
	In-VM Pile	    |	Legacy Text Binary Protocols Unit Testability
	-------------------------------------------------------------------------------------
	Extensible Event Model
	Universal Communication API
	Zero-Copy-Capable Rich Byte Buffer
	-------------------------------------------------------------------------------------


3、实现通信的步骤
	
	1 创建两个NIO线程组，一个专门用于网络事件处理(接受客户端连接)
	另一个则进行网路通信读写

	2 创建一个ServerBootstrap对象，配置Netty的一系列参数，例如接收传出
	数据的缓存大小等等

	3 创建一个实际处理数据的类ChannelInitializer,进行初始化的准备工作
	比如设置接收传出数据的字符集，格式，已经实际处理数据的接口

	4 绑定端口，执行同步阻塞方法等待服务器端启动即可



4、拆包粘包解决方案

	TCP是一个“流”协议，无界限，TCP底层并不了解上层的业务数据具体含义
	它会根据TCP缓冲区的实际情况进行包的划分，业务上我们一个完整的包可能
	会被TCP分成多个包进行发送，也可能把多个小包封装成一个大的数据发送出去
	这就是TCP粘包，拆包问题
	如：
		ABC DEF GHI
		AB CDEFG H I

	产生原因
		应用程序write写入字节大小大于套接口发送缓冲区的大小
		进行MSS大小的TCP分段
		以太网帧的payload大于MTU进行IP分片

	解决方式
		
		1、消息定长，如每个报文的大小固定为200个字节，如果不够，空位补空格
		2、在包尾添加特殊字符进行分割，例如加回车或者符号如$_
		3、将消息分为消息头，和消息体，在消息头中包含消息总长度的字段
		   然后进行业务逻辑的处理
	
5、UDP
	USER DATAGRAM PROTOCOL 用户数据报协议
	无连接的传输层协议。提供不可靠消息传送服务

	UDP不提供数据包分组，组装和不能对数据包进行排序，无法得知是否安全完整到达

6、数据通信方式

	1、使用长连接。服务器和客户端的通道一直处于开启状态

	2、批量提交数据，采用短连接的方式，数据保存在临时缓冲区

	3、特殊的长连接，在指定的某一时间内，服务器与某台客户端没有任何通信
	   则断开连接，下次连接则是客户端向服务器发送请求的时候，再次建立连接
	   这种模式需要考虑的2个因素：
		如何在超时（服务器和客户端没有任何通信）后关闭通信，关闭后如何再次建立连接
		服务器宕机时，我们的客户端如何与服务器进行连接呢	
				
	
	客户端连接
	ChannelFuture channelFuture = bootstrap.connect(IP, PORT).sync();

	判断状态
	channelFuture .isAlive(); 是否已激活
	


	服务器端
	class ChildChannelHandler extends ChannelInitializer<SocketChannel> {

		protected void initChannel(SocketChannel socketChannel) 
			
			socketChannel.pipeline().addLast(new ReadTimeoutHandler(5)); //设置超时断开


7、心跳检测

	Master - Slave 间实时监控

	获取操作系统相关信息的类库 sigar，需要JDK bin中添加相关支持

	Jboss Marshalling  序列化，编解码

		
	
8、HTTP协议
		超文本传输协议，是建立在TCP传输协议之上的应用层协议
		他目前主流是针对WEB开发，HTTP协议应用非常广泛
	

		特点
			简单：URL+参数
			灵活：允许传输任意类型的数据对象，传输对象由HTTP
			      消息头中的Content-Type加以标记
			无连接
				限制每次连接只处理一个请求，服务器处理完客户的请求，并收到
				应答后，即断开连接，节省传输时间
				
			无状态：http协议是无状态的，指的是对事务处理没有记忆能力，这意味着
				如果后续处理需要之前的信息，则他必须重新获取，也从侧面
				体现Http设计是为了使网络传输更加轻量级，敏捷，负载较轻

			协议组成部分
				
				请求行
				请求头
				请求正文

			状态码

				1xxx: 提示信息，表示请求已接收，继续处理
				2xxx: 成功，表示请求已被成功接收，接受
				3xxx：重定向，要完成请求必须进行更进一步的操作
				4xxx: 客户端错误，请求有语法错误或请求无法实现
				5xxx: 服务端错误，服务器未能实现合法的请求


				200 OK 客户端请求成功
				400 Bad Request 客户端请求有语法错误，不能被服务器锁理解
				401 Unauthorized 请求未经授权，这个状态码必须和www-authenticate报头域一起使用
				403 Forbidden 服务器收到请求，但是拒绝提供服务
				404 请求资源不存在
				500 Internal Server Error 服务器发生不可预期错误
				503 服务器当前不能与处理客户端的请求，一段时间后可能恢复正常


			请求方法
				HTTP1.0: GET POST HEAD	
				HTTP1.1: 新增 OPTIONS PUT DELETE TRACE CONNECT


				GET 请求指定的页面信息，并返回实体
				HEAD 类似于GET请求，只不过返回的响应中没有具体内容，用于获取报头
				POST 向指定资源提交数据，进行处理请求（表单，上传文件）
				     POST请求可能会导致新的资源的建立或者已有资源的修改

				DELETE   请求服务器删除指定的页面。
				OPTIONS  允许客户端查看服务器的性能。
				TRACE   回显服务器收到的请求，主要用于测试或诊断。			
				
		使用netty的http协议也是异步非阻塞的

	


















	