
		Netty




1、谁在用
	
	Hadoop的RPC框架Avro，JMS,RocketMQ,主流的分布式通信框架Dubbox

	选择原因
		流行的NIO client-server 异步框架
		简单易用的API从网路处理代码中解耦业务逻辑
		健壮性，功能，性能，可定制性，可扩展性


	
2、架构组成

	Transport Services  | 	Protocol Support
	-------------------- --------------------------------------------------------------
	Socket Datagram     |	Http WebSocket          SSL StartTLS          Google Protobuf
	Http Tunnel		zlib/gzip Compression   Large File Transfer   Rtsp
	In-VM Pile	    |	Legacy Text Binary Protocols Unit Testability
	-------------------------------------------------------------------------------------
	Extensible Event Model
	Universal Communication API
	Zero-Copy-Capable Rich Byte Buffer
	-------------------------------------------------------------------------------------


3、实现通信的步骤
	
	1 创建两个NIO线程组，一个专门用于网络事件处理(接受客户端连接)
	另一个则进行网路通信读写

	2 创建一个ServerBootstrap对象，配置Netty的一系列参数，例如接受传出
	数据的缓存大小等等

	3 创建一个实际处理数据的类ChannelInitializer,进行初始化的准备工作
	比如设置接受传出数据的字符集，格式，已经实际处理数据的接口

	4 绑定端口，执行同步阻塞方法等待服务器端启动即可



4、拆包粘包解决方案

	TCP是一个“流”协议，无界限，TCP底层并不了解上层的业务数据具体含义
	它会根据TCP缓冲区的实际情况进行包的划分，业务上我们一个完整的包可能
	会被TCP分成多个包进行发送，也可能把多个小包封装成一个大的数据发送出去
	这就是TCP粘包，拆包问题
	如：
		ABC DEF GHI
		AB CDEFG H I

	产生原因
		应用程序write写入字节大小大于套接口发送缓冲区的大小
		进行MSS大小的TCP分段
		以太网帧的payload大于MTU进行IP分片

	解决方式
		
		1、消息定长，如每个报文的大小固定为200个字节，如果不够，空位补空格
		2、在包尾添加特殊字符进行分割，例如加回车或者符号如$_
		3、将消息分为消息头，和消息体，在消息头中包含消息总长度的字段
		   然后进行业务逻辑的处理


	
5、UDP
	USER DATAGRAM PROTOCOL 用户数据报协议
	无连接的传输层协议。提供不可靠消息传送服务

	UDP不提供数据包分组，组装和不能对数据包进行排序，无法得知是否安全完整到达



















	