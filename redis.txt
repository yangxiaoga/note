
                                Redis

1、Redis是什么

   开源的BSD协议，使用ANSI C编写,基于内存且支持持久化，高性能的NO-SQL数据库

   支持数据结构类型丰富，如字符串strings,散列hashes,列表lists,集合sets,有序集合sorted sets
   与范围查询，bitmaps,hyperloglogs和地理空间索引半径查询

2、用途
   缓存、数据库（微博）、消息中间件


3、为什么要使用redis

   独特的键值对模型

   SQL,要想查询快，建立索引，索引放到内存中，数据在硬盘中

   Memcached - 键值对数据库，键值都是字符串
   文档数据库MongoDB - 由JSON/BSON组成的文档

   Redis虽然也是键值对数据库，但是和Memcached不同的是，redis的值不仅可以
   是字符串，还可以是其他五种数据结构中的任意一种

    基于内存的数据库，值直接在内存中，值就是索引
    Redis还可以持久化
    过期键功能：指定时间后删除

    支持事务
    主从复制
    集群

4、Redis安装

   因为是C编写的，需要编译，安装    
  
 
   mount /dev/cdrom /mnt --这里使用的是本地的ISO文件

   yum install gcc tcl -y

   make

   make install PREFIX=/usr/local/redis install

   ss -tanl 查看端口的情况
   
   redis做成服务

   拷贝src下的redis-sentinel:  cp redis-sentinel /usr/local/reids/bin

   vim ~/.bash_profile

   export REDIS_HOME=/usr/local/redis
   export PATH=$PATH:$REDIS_HOME/bin

   source ~/.bash_profile

   做成后台的服务

   源码的 utils下：

   ./install_server.sh

    Config file    : /etc/redis/6379.conf
    Log file       : /var/log/redis_6379.log
    Data dir       : /var/lib/redis/6379
    Executable     : /usr/local/redis/bin/redis-server
    Cli Executable : /usr/local/redis/bin/redis-cli


   修改服务名称
   /etc/init.d/ 下的redis_6379 - >redisd
   mv redis_6379 redisd

   service redisd start

   连接:默认有16个库
   
   redis-cli

   /sbin/iptables -I INPUT -p tcp --dport 6379 -j ACCEPT

5、命令

  文字，数组，浮点数，二进制

  1、set key value; 如果有则会覆盖
  2、set key value nx 不存在则写
  3、set key value xx 键不存在时不能设置
  4、set  key value ex 10 10秒后删除
     expire msg 5 5秒过期
     pexpire msg 5 5毫秒过期
     persist key 删除过期
  5、set  key value px 10 10毫秒后删除
  6、mset a 1 b 2 c 3 原子性，一个不成功则全部不成功
  7、keys * 所有的key   
     get key 获取值
     mget key 获取多个   
  8、getset  key new-value
     将字符串键的值设置成new-value,并返回字符串键设置新值之前存储的旧的值
  9、append key "value" 追加内容；如果键存在就追加，如果不存在就等于set key value
  10、strlen key 返回字符串的长度
  11、setrange msg 1 appy  从1位置开始替换,从1开始后的几个位置分别被a p p y占据(覆盖)
  12、getrange msg 0 4  ；getrange msg -5 -1  如：hello world   d所在位置为-1，h为0
  13、incrby num 100,如果不存在则自动创建为0的数，并加100
  14、decrby num 2
  15、incr num 增1操作
  16、decr num 减1操作
  17、incrbyfloat num 3.14 浮点数操作增加，无减版本，加负数即可
 
   key值是二进制安全的
   key值不需要太长，消耗内存，查找这类键值得计算成本较高
   键值不宜过短

   一个字符串类型的值最多能存储512M字节的内容

   18、ttl key 有多长的存活时间；如果key存在，但没有设置ttl，返回-1
                key存在，但还在生存期内，返回剩余的秒或者毫秒
                key曾经存在，但已经消亡，返回-2


   19、type key 查看键值类型
   20、exists key 键是否存在
   21、rename key newkey 键重命名
       rename key newkey 当newkey 不存在时修改
   22、del key 删除键，


   Redis字符串是由5个字节组成
   23、setbit key offset value 设置某一位上的值 offset偏移量从0开始
       set temp 0b011
       setbit temp 0 1 
    
   24、getbit key offset 获取某一位上的值
   25、bitpos key bit [start][end]   ,bit为0或者1
       返回指定值0或者1在指定区间上第一次出现的位置

   26、bitcount  s1，键所对应的值1有多少位

   27、bitop operation desykey key[key ...] 或
   
   中文用三个字节

6、JavaJedis   

   Redis: flushdb 命令用于清空当前数据库中的所有 key,容易丢饭碗
          flushall 清楚所有数据

7、位图

   统计在线天数
   setbit u500 1 1
   setbit u500 30 1
   bitcount u500


   按天统计网站活跃用户
  
   天作为key,用户ID为offset,上线置为1


  求一段时间内活跃用户数
  setbit 20160602 15 1
  
  setbit 20160601 123 1
  setbit 20160606 123 1

  求6月1日到6月10日的活跃用户

  bitop or 20160601-10   20160601  20160602 20160603 20160610
  bitcount 20160601-10

  结果为2，有两位活跃用户

8、list列表

   基于LinkedList实现
   元素是字符串类型
   列表头尾增删块，中间增删慢，增删元素是常态
   元素可以重复出现
   最多包含2^32-1元素

   索引，从左到右0，从右到左则-1

   B block块 阻塞
   L left 左
   R right 右
   X exist 存在

   
   LPUSH key value [value...] 左端压入 如：LPUSH list java scala python

   LPUSHX key value

   RPUSH key value [value ...] 右端压入

   RPUSHX key value

   左右或者头尾弹出元素

   LPOP key 
   RPOP key

   从一个列表尾部弹出元素压入另一个列表头部
   RPOPLPUSH source destinatin

   返回列表中指定范围元素

   LRANGE key start stop
   LRANGE key 0 -1 返回所有元素

   
   获取指定位置的元素
   LINDEX key index

   设置指定位置元素的值
   LSET key index value

   列表长度
   LLEN key

   从列表头部开始删除值等于value的元素count次
  
   lrem key count value

   count > 0: 从表头开始向表尾搜索，移除与value相等的元素，数量为count
   cout < 0: 从表尾开始向表头搜索，移除与value相等的元素，数量为count的绝对值
   count=0:移除表中与value相等的值

   如：rpush list c abc c ab 123 ab bj ab redis list
       lrem list 2 ab
       lrange list 0 -1 


    去除指定范围外元素，不会删除原有元素，只是返回一个新的列表，类似于分页的效果
    ltrim key start stop

    rpush list c abc ab 123 redis
    ltrim list 0 -1  一个都没删除
    ltrim list 1 -1 剩下第一个元素
    ltrim list 1 10000



    在列表中某个存在的值前或者后插入元素

    Linsert key before|after element value
    如：linsert list after java python
        linsert list before java python
  

    
    阻塞：
    如果弹出的列表不存在或者为空，就会阻塞
    超时时间设置为0，就会永久阻塞，知道有数据可以弹出
    如果多个客户端阻塞在同一个列表上，使用First in first service原则，先到先服务

    左右或者头尾阻塞弹出元素
    blpop key timeout
    brpop key timeout

    从一个列表尾部阻塞弹出元素压入另一个列表的头部
    brpoplpush source destination timeout

    
  
9、Hash散列

   用途：节约内存空间，因为键的附加信息（键的类型，最后访问时间等）也是消耗内存的
   若需要setbit getbit bitop需要使用字符串，而不是散列
   fields不能使用过期键功能

   由field和关联的value组成的map

   一个hash中最多包含2^32 -1 键值对

   
   设置单个字段

    hset key field value 
    hsetnx key field value ,key的field不存在的情况下执行，key不存在直接创建

    设置多个字段
    hmset key field value[field value...]

    返回字段个数
    hlen key

    判断字段是否存在

    hexists key field
    key或者field不存在，返回0

    获得域
    hget key field
 
    返回多个字段值 hmget key field[field...]
       
    返回所有键值对
    hgetall key

    返回所有字段名
    hkeys key
 
    返回所有值
    hvalue key

    在字段对应的值上进行整数的增量计算
    hincrby key field increment

    在字段对应的值上进行浮点数的增量计算
    hincrbyfloat key field increment

    删除指定的字段

    hdel key field[field]

    应用：user:100 user:606 20160808 统计好友数

    统计关注数，粉丝数，喜欢商品数，发帖数
    用户为key,不同维度为field,value为统计数
    


    集合操作

     
    set 无序结合，去重的

     元素是字符串类型
     最多包含2^32 -1元素

     
     增加一个或多个元素

     sadd key member[member...]

     如：sadd friends peter jack tom


     移除一个或者多个元素
     srem key member[member...]

     返回集合包含的所有元素
     smembers key
     如果集合元素过多，例如几百万个，需要遍历，可能会造成服务器阻塞，生产环境避免使用

     检查给定元素是否存在在集合中
     sismember key member
      
     随机返回集合中指定个数的

     srandmember key [count]
     count为正数，且小于集合基数，name命令返回一个包含count个元素的数组，数组中的元素各不相同，
     如果count大于等于集合基数，name返回整个集合

     如果count为负数，name命令返回一个数组，数组中的元素可能会重复出现多次，而数组的长度为count的绝对值
     如果count为0，则返回空
     如果count不确定，随机返回一个元素

     如：srandmember friends 3
         srandmember friends -5
    
     应用：抽奖，随机来取

     返回集合中元素的个数(键的结果会保存信息，集合长度记录在里面，所不需要遍历)

     scard key

     随机从集合中移除并返回这个被移除的元素
     spop key
     
     smove source destination member

     差集
     sdiff key [key...]从第一个key的集中中去除其他集合和自己交集的部分
     如：sdiff number1 123 456 789；sdiff number1 number2
   
     sdiffstore destination key [key...] 将差集结果存储在目标key中
 
     交集
     sinter key [key...]
     sinterstore destinatin key [key...]将交集结果存储在目标key中     

     并集
     sunion key [key...] 取所有集合并集
     sunionstore destination key [key...] 将并集结果存储在目标key中

     应用：共同关注 sinter key1 key2

      
     有序集合sortedset

     zadd key score member
  
     如：zadd fruits 3.2 banana

      移除
      zrem key member [member...] 元素不存在，自动忽略

      zrem fruits pear
     
      显示分值
      zscore key member

      zscore fruits pear
     
      增加或者减少分值
      zincrby key increment member  increment为负，则减少
      如：zincrby fruits -1 pear

       
      返回元素的排名

      zrank key member

      zrank fruits pear

      返回元素的逆序排名

      zrevrank key member

      zrevrank fruits melon

      取某个区间内的元素

      zrange key  start stop[withscores] 从小到大

      zrevrange key start stop [withscores]

          
      返回指定分值区间元素
      zrangebyscore key min max[withscores][limit offset count] offset跳过多少个，count返回几个  
      -inf和+inf表示负无穷和正无穷

      zrangebyscore fruits 4 7   ,可以使用(,)
      zranggebyscore fruits -inf +inf

      删除指定排名范围的元素
      zremrangebyrank key start stop  

      根据分值范围删除
      zremrangebyscore key min max

      发挥集合中元素个数
      zcard key
     
      返回指定范围中元素个数
      zcount key min max
      zcount fruits 4 7
      
      并集
      zunionstore destinatin numkeys key [key...]
     
      zadd scores1 70 tom 80 peter 30 john
      zadd scores2 90 peter 60 ben

      zunionstore scores-all 2 scores1 scores2      ;对两个键scores1,scores2操作
   
      默认重复的话会去重，并且将score相加，权重都是1，对于peter就是90+80=170
   

     zunionstore scores-all 2 scores1 scores2 aggregate min 取小的值

     zunionstore scores-all 2 scores1 scores2 wights 1 0.5 aggregate sum 分配权重


     zinterstore destination numkeys key [key...][weights weight][aggregate sum|min|max]

     应用：排行榜


    持久化

    落地到磁盘

    为什么要持久化
       基于内存的
       缓存服务器，需要吗？看情况，如果web服务器受得了
       内存数据库，需要吗？需要
       消息队列，需要吗？需要

    Redis持久化方式
      RDB Redis db
      AOF AppendOnlyFile,存的是一条条执行的命令，默认不开启

    RDB持久化
     
    将服务器包含的所有数据库的数据以二进制文件的
    形式保存到硬盘里 dump.rdb

    服务器启动时载入RDB文件，服务器可以根据RDB文件的内容
    还原服务器原有的数据库数据

    1、客户端 save - 服务器 阻塞当前服务
       >save

       redis服务器将被阻塞，无法处理客户端发送的命令请求
       只有在save命令执行完毕之后，服务器才会重新开始处理
       客户端发送的命令请求
       
       如果rdb文件已经存在，name服务器将自动使用心得rdb文件去替代旧的rdb文件


    2、客户端 bgsave - 服务器 后台执行

        执行bgsave命令同样可以创建一个新的rdb文件，这个命令和save命令的区别在于
        bgsave不会造成redis服务器阻塞，在执行bgsave命令的过程中，redis服务器
        仍然可以正常的处理其他客户端发送的命令请求

         原因：当redis服务器接收到bgsave命令时，他不会自己来创建rdb文件，而是通过
         fork()生成一个子进程，然后由子进程负责，自己继续处理客户端的命令请求

         当子进程创建好rdb文件并退出时，会向父进程发送一个信号，告知rdb创建完毕
         最后redis服务器接收子进程创建的rdb文件，bgsave执行完毕

          默认放在 /var/lib/redis/6379/dump.rdb

         创建子进程，会消耗额外的内存，
          

    3、服务器自动执行BGSAVE
       第三种redis服务器自动执行
 
      
       配置文件
       save 300 10
       表示如果距离上一次创建rdb文件已经过去了300秒，并且服务器的所有数据库总共已经发生了
       不少于10次修改，那么执行bgsave命令

     
       也可以设置多个条件如
       save 900 1
       save 200 10
       save 60 10000
       任意一个满足，服务器都会执行bgsave,创建rdb后，服务器时间计数器被清零，即多个保存条件的效果是不会叠加的


    RDB文件的内容
  
    redis的数据库 0-N
    
    数据库的键值对，键的超时时间，键的类型，键的值
     
    压缩的格式来存   

  
    RDB文件的操作不能过于频繁，否则会严重影响服务器的性能

    

   【AOF持久化】

    每当有修改数据库的命令被执行时，服务器就会将执行的命令写入到AOF文件的末尾
    服务器只需要重新执行一遍AOP文件里面包含的所有命令，就可以达到还原数据库的目的

     
    客户端 - 命令 - 服务器 - AOF文件

    并不一定百分百不丢失数据
    系统可能被将内容放到内存缓冲区buffer,有个写入的时间间隔

    redis为AOF持久化提供了appendfync选项，这个选项的值可以是always,everysec或者no
    always:服务器每写入一个命令，就调用一次fdatasync,将缓冲区的命令写入到磁盘里
    everysec:服务器每一秒调用一次fdatasync
    no:不主动调用fdatasync,由操作系统决定将缓冲区的的命令写入到磁盘
    
    运行速度：always 的速度慢，everysec和no都很快
    默认值everysec

    配置文件：appendonly yes
              appendfilename "appendonly.aof"
              appendfsync everysec
           

    同时 aof文件有重写机制，将命令进行整理

    >bgrewriteaof
  
    或者配置文件
   auto-aof-rewrite-min-size 重写所需最小体积，默认64mb
   auto-aof-rewrite-percentage 100 扩展了一倍进行重写




   【主从模式】

     主从复制：replication
     
     一个redis服务可以有多个该服务的复制品，这个redis服务称为master，其他复制品称为slaves
  
    只要网络连接正常，master会一直将自己的数据更新同步给slaves，保持主从同步
    只有master可以执行写命令，slaves只能执行读命令


    主从复制

    从服务器执行客户端发送的读命令如: get lrange smembers hget zrange等等

    客户端可以连接slaves执行读请求，来降低master的读压力 


    主从复制创建

    redis-server --slaveof <master-ip> <master-port>配置当前服务称为某redis服务的slave
    redis-server --port 6380 --slaveof 127.0.0.1 6379.可以在同一台及其上操作，启动多个

    >slaveof 192.168.1.1 6379 将服务转换为slave
    >slaveof no one 将服务重新恢复到master,不会丢弃已同步数据

   配置方式:配置文件

    slaveof <master-ip> <master-port>

    slaveof 127.0.0.1 6379 - 将这两句话写在空白文件6380.conf中
    port 6380
     
    >redis-server 6380.conf
   
   以上都是手动配置和切换，自动实现需要哨兵机制

   【哨兵】

    master挂了，则提升slave为master

    src/sentinel复制到bin

    redis-sentinel 

    sentinel会不断检查master和slaves是否正常
    每一个sentinel可以监控多个slaves和master

    可以有多个哨兵

    主服务器挂了，sentinel(奇数)个，选举新的master,将slave注册

    配置文件：监视主的ip和端口
    sentinel monitor myname 127.0.0.1 6379 2 (2表示至少有2个人认为master挂了)

    sentinel默认端口为26379

    
    sentinel配置实例：
      redis-sentinel sentinel1.conf
      redis-sentinel sentinel2.conf

     其中sentinel1.conf的内容为 port 26379
                                sentinel monitor s1 127.0.0.1 6379 2
         sentinel2.conf的内容为 port 26380
                                sentinel monitor s1 127.0.0.1 6379 2
 
     启动哨兵：redis-centinel sentinel1.conf

    一个机器可以有多个redis实例，一个sentinel就可以了

   主从复制+sentinel哨兵，解决了读性能，但没解决写性能

   【分片的思想】
 
    大表水平切分

   Twemproxy - 写性能

   兼容redis和memcached,将redis添加到一个服务器池pool中，并通过客户选择的散列函数和分布函数
   将来自客户端的命令请求发给服务器池中的各个服务器

   
    
   配置文件

    poolname：服务器池的名字，支持创建多个服务器池

      listen:192.168.56.201:22121,服务器池的坚挺地址和端口号 
      hash:fnvla_64,键散列算法，用于将键映射为一个散列值

      distribution: ketama,键分布算法，决定键被分布到哪个服务器
      redis：true 代理redis命令请求，不给定时默认代理memcached请求
      servers,池中各个服务器的地址和端口号权重
      auto eject hosts
      server failure limit: twemproxy 连续3次向服务器发送命令请求都遇到错误时，twemproxy就会将
                            该服务器标记为下线，并交由池中的其他在线服务器处理
      


      mypool:
         listen: 192.168.56.201:22121
         hash:fnvla_64
         distribution: ketama
         auto_eject_hosts: true 如果有连接不上了，直接拒绝
         server retry timeout: 2000
         redis：true
         server failure limit: 3
         servers:
          - 192.168.56.201:6379:1    1代表权重
          - 192.168.56.202:6379:1
          - 192.168.56.203:6379:1

alpha:
  listen: 127.0.0.1:22121
  hash: fnv1a_64
  hash_tag: "{}"
  distribution: ketama
  auto_eject_hosts: false
  timeout: 400
  redis: true   
      
       【安装twemproxy】

     
        安装autoconf-2.6.9
            automake-1.1.5
            libtool-2.4.5
            twemproxy-0.4.1
  
         
      >wget https://github.com/twitter/twemproxy/archive/v0.4.1.tar.gz

      >tar -zvxf v0.4.1.tar.gz

      >aclocal 会生成aclocal.m2

      >autoconf 会生成configure

      >mkdir conf
 
      >autoheader

      >libtoolize
     
      >automake -a

      >./configure

      >make

      >make install   

     在当前目录生成配置文件

     vim nutcracker.mypool.yml
     把上面的mypool配置加入其中


     启动

     >cd /usr/local/sbin
     >nutcracker -d -c /usr/local/twemproxy-0.4.1/nutcracker.mypool.yml
     
     redis-cli -p 22121

     twemproxy数据能机上上根据key进行比较均衡的分布
     后台redis挂掉，twemproxy能够自动摘除，恢复后，可以自动识别，恢复，加入到redis组中重新使用

     新增redis,twemproxy需要重启


     
     【Redis原生的集群】

      由多个redis服务器组成的分布式网络服务集群
      每一个redis服务器称为一个节点，节点之间会相互通信，两两相连
      redis集群无中心节点
      
      
      每个节点都有两种角色可选：主节点master,node,从节点slave node

      其中主节点用于存储数据，从节点则是某个主节点的复制品

      一般6个节点，3个主，3个从

      如果主挂掉，可以将从自动提升为主

      主节点内置了sentinel的节点故障检测，和自动故障转移功能
   
       
      【redis集群分片】

       整个数据库分为16384个槽位slot
       所有key这些slot中的一个

        key的槽位计算：slot number = crc16(key)%16384, 2^14
        其中crc16为16位的循环冗余校验和函数
   
        集群中的每个主节点都可以处理0个至16383个槽
        当16384个槽都有某个节点在负责处理时，集群进入上限状态
        并开始处理客户端发送的数据命令请求

        举例
          三个主节点7000,7001，7002平均分片16384个slot槽位
          节点7000指派的槽位为0到5460
          节点7001指派的槽位为5461到10922
          节点7002指派的槽位为10923到16383

          槽位是可以调整的

           主节点只会处理自己负责的槽位的命令请求，其他请求，该主节点会返回客户端一个专项错误
           客户端根据错误包中包含的地址和端口重新向正确的负责的主节点发起命令请求


       【集群搭建】


         创建多个主节点
         为每一个节点，指派slot,将多个节点连接起来，组成一个集群
         槽位分片完成为，集群进入上线状态
         6个节点：3个主节点，每一个主节点有一个从节点

         bin下创建目录cluster/7000,7001,7002...7005

         分别在7000等下面创建redis.conf文件
                cluster-enable yes
                port 7000
                
          启动redis实例：

              redis-server redisconf
          环境变量要配置好redis_home

         创建集群：通过脚本分配槽
            需要安装ruby  
            yum install ruby rubygems -y
            gem install redis
         
         在redis源码的地方src下执行
         ./redis-trib.rb create --replicas 1 127.0.0.1:7000 127.0.0.1:7001 ... 127.0.0.1:7005

         
         redis-cli -p 7002 -c   -c表示集群模式
         
         挂掉，再次启动，自动落为slave
 





   





   
   








